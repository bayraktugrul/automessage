// Code generated by MockGen. DO NOT EDIT.
// Source: automsg/pkg/scheduler/observer (interfaces: MessageObserver)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/message_observer_mock.go -package=mocks automsg/pkg/scheduler/observer MessageObserver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageObserver is a mock of MessageObserver interface.
type MockMessageObserver struct {
	ctrl     *gomock.Controller
	recorder *MockMessageObserverMockRecorder
	isgomock struct{}
}

// MockMessageObserverMockRecorder is the mock recorder for MockMessageObserver.
type MockMessageObserverMockRecorder struct {
	mock *MockMessageObserver
}

// NewMockMessageObserver creates a new mock instance.
func NewMockMessageObserver(ctrl *gomock.Controller) *MockMessageObserver {
	mock := &MockMessageObserver{ctrl: ctrl}
	mock.recorder = &MockMessageObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageObserver) EXPECT() *MockMessageObserverMockRecorder {
	return m.recorder
}

// OnMessageProcessed mocks base method.
func (m *MockMessageObserver) OnMessageProcessed(messageID string, success bool, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnMessageProcessed", messageID, success, err)
}

// OnMessageProcessed indicates an expected call of OnMessageProcessed.
func (mr *MockMessageObserverMockRecorder) OnMessageProcessed(messageID, success, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessageProcessed", reflect.TypeOf((*MockMessageObserver)(nil).OnMessageProcessed), messageID, success, err)
}
