// Code generated by MockGen. DO NOT EDIT.
// Source: automsg/pkg/service (interfaces: MessageService)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/message_service_mock.go -package=mocks automsg/pkg/service MessageService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "automsg/pkg/model/dto"
	response "automsg/pkg/model/response"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
	isgomock struct{}
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockMessageService) BeginTx(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockMessageServiceMockRecorder) BeginTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockMessageService)(nil).BeginTx), ctx)
}

// GetSentMessages mocks base method.
func (m *MockMessageService) GetSentMessages(ctx context.Context, page, pageSize int) ([]response.MessageResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages", ctx, page, pageSize)
	ret0, _ := ret[0].([]response.MessageResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockMessageServiceMockRecorder) GetSentMessages(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*MockMessageService)(nil).GetSentMessages), ctx, page, pageSize)
}

// GetUnsentMessages mocks base method.
func (m *MockMessageService) GetUnsentMessages(ctx context.Context, limit int) ([]dto.MessageProcessingDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsentMessages", ctx, limit)
	ret0, _ := ret[0].([]dto.MessageProcessingDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsentMessages indicates an expected call of GetUnsentMessages.
func (mr *MockMessageServiceMockRecorder) GetUnsentMessages(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsentMessages", reflect.TypeOf((*MockMessageService)(nil).GetUnsentMessages), ctx, limit)
}

// LockMessageForProcessing mocks base method.
func (m *MockMessageService) LockMessageForProcessing(ctx context.Context, tx *sql.Tx, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockMessageForProcessing", ctx, tx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockMessageForProcessing indicates an expected call of LockMessageForProcessing.
func (mr *MockMessageServiceMockRecorder) LockMessageForProcessing(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockMessageForProcessing", reflect.TypeOf((*MockMessageService)(nil).LockMessageForProcessing), ctx, tx, id)
}

// MarkMessageAsSentTx mocks base method.
func (m *MockMessageService) MarkMessageAsSentTx(ctx context.Context, tx *sql.Tx, id int64, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessageAsSentTx", ctx, tx, id, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessageAsSentTx indicates an expected call of MarkMessageAsSentTx.
func (mr *MockMessageServiceMockRecorder) MarkMessageAsSentTx(ctx, tx, id, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessageAsSentTx", reflect.TypeOf((*MockMessageService)(nil).MarkMessageAsSentTx), ctx, tx, id, messageID)
}
