// Code generated by MockGen. DO NOT EDIT.
// Source: automsg/pkg/service (interfaces: ProcessingService)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/processing_service_mock.go -package=mocks automsg/pkg/service ProcessingService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "automsg/pkg/model/dto"
	observer "automsg/pkg/scheduler/observer"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessingService is a mock of ProcessingService interface.
type MockProcessingService struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingServiceMockRecorder
	isgomock struct{}
}

// MockProcessingServiceMockRecorder is the mock recorder for MockProcessingService.
type MockProcessingServiceMockRecorder struct {
	mock *MockProcessingService
}

// NewMockProcessingService creates a new mock instance.
func NewMockProcessingService(ctrl *gomock.Controller) *MockProcessingService {
	mock := &MockProcessingService{ctrl: ctrl}
	mock.recorder = &MockProcessingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingService) EXPECT() *MockProcessingServiceMockRecorder {
	return m.recorder
}

// ProcessMessages mocks base method.
func (m *MockProcessingService) ProcessMessages(ctx context.Context, messages []dto.MessageProcessingDto, observerChan chan<- observer.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessages", ctx, messages, observerChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessages indicates an expected call of ProcessMessages.
func (mr *MockProcessingServiceMockRecorder) ProcessMessages(ctx, messages, observerChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessages", reflect.TypeOf((*MockProcessingService)(nil).ProcessMessages), ctx, messages, observerChan)
}
