// Code generated by MockGen. DO NOT EDIT.
// Source: automsg/pkg/scheduler/strategy (interfaces: ProcessingStrategy)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/processing_strategy_mock.go -package=mocks automsg/pkg/scheduler/strategy ProcessingStrategy
//

// Package mocks is a generated GoMock package.
package mocks

import (
	observer "automsg/pkg/scheduler/observer"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessingStrategy is a mock of ProcessingStrategy interface.
type MockProcessingStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingStrategyMockRecorder
	isgomock struct{}
}

// MockProcessingStrategyMockRecorder is the mock recorder for MockProcessingStrategy.
type MockProcessingStrategyMockRecorder struct {
	mock *MockProcessingStrategy
}

// NewMockProcessingStrategy creates a new mock instance.
func NewMockProcessingStrategy(ctrl *gomock.Controller) *MockProcessingStrategy {
	mock := &MockProcessingStrategy{ctrl: ctrl}
	mock.recorder = &MockProcessingStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingStrategy) EXPECT() *MockProcessingStrategyMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcessingStrategy) Process(ctx context.Context, batchSize int, observerChan chan observer.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, batchSize, observerChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcessingStrategyMockRecorder) Process(ctx, batchSize, observerChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessingStrategy)(nil).Process), ctx, batchSize, observerChan)
}
